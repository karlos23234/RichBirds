const express=require('express'),bodyParser=require('body-parser'),cors=require('cors'),axios=require('axios'),db=require('./db');
const app=express();app.use(cors());app.use(bodyParser.json());app.use(express.static('public'));
const TRC20='TWzZVoKptLx3KJfshfmkNnFtC3kY2LVi4M',MIN=1000;
app.get('/api/user-info',(r,s)=>{db.get('SELECT * FROM users WHERE id=1',(e,row)=>{if(!row){db.run('INSERT INTO users(username,balance,total_deposited) VALUES(?,?,?)',['Guest',0,0]);return s.json({ok:true,balance:0,total_deposited:0,user_id:1});}s.json({ok:true,balance:row.balance,total_deposited:row.total_deposited,user_id:row.id});});});
app.post('/api/verify-trx',(r,s)=>{const tx=r.body.txid;if(!tx)return s.json({ok:false,error:'No Tx'});db.run('INSERT OR IGNORE INTO txs(txid,amount,status) VALUES(?,?,?)',[tx,5000,'confirmed'],(e)=>{if(e)return s.json({ok:false,error:e.message});db.run('UPDATE users SET balance=balance+5000,total_deposited=total_deposited+5000 WHERE id=1');s.json({ok:true,message:'Deposit credited +5000֏'});});});
app.post('/api/withdraw',(r,s)=>{const{user_id,amount,to_address}=r.body;if(!user_id||!amount||!to_address)return s.json({ok:false,error:'missing fields'});const amt=parseInt(amount,10);if(amt<MIN)return s.json({ok:false,error:`Minimum withdraw is ${MIN}֏`});db.get('SELECT * FROM users WHERE id=?',[user_id],(e,u)=>{if(e)return s.json({ok:false,error:e.message});if(!u)return s.json({ok:false,error:'user not found'});if(u.total_deposited<MIN)return s.json({ok:false,error:`Must deposit at least ${MIN}֏ before withdrawing`});if(u.balance<amt)return s.json({ok:false,error:'Insufficient balance'});db.run('INSERT INTO withdraws(user_id,amount,address) VALUES(?,?,?)',[user_id,amt,to_address]);db.run('UPDATE users SET balance=balance-? WHERE id=?',[amt,user_id]);s.json({ok:true,message:'Withdraw request created (pending review)'});});});
const PORT=process.env.PORT||3000;app.listen(PORT,()=>console.log('Server running on '+PORT));